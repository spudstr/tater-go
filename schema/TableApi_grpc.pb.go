// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package schema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TableApiClient is the client API for TableApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TableApiClient interface {
	// Authenticate to return a Session Token
	Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// Open a streaming channel
	StreamData(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (TableApi_StreamDataClient, error)
}

type tableApiClient struct {
	cc grpc.ClientConnInterface
}

func NewTableApiClient(cc grpc.ClientConnInterface) TableApiClient {
	return &tableApiClient{cc}
}

func (c *tableApiClient) Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/mdtapi.rpc.pb.TableApi/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableApiClient) StreamData(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (TableApi_StreamDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &TableApi_ServiceDesc.Streams[0], "/mdtapi.rpc.pb.TableApi/StreamData", opts...)
	if err != nil {
		return nil, err
	}
	x := &tableApiStreamDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TableApi_StreamDataClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type tableApiStreamDataClient struct {
	grpc.ClientStream
}

func (x *tableApiStreamDataClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TableApiServer is the server API for TableApi service.
// All implementations must embed UnimplementedTableApiServer
// for forward compatibility
type TableApiServer interface {
	// Authenticate to return a Session Token
	Authenticate(context.Context, *AuthRequest) (*AuthResponse, error)
	// Open a streaming channel
	StreamData(*StreamRequest, TableApi_StreamDataServer) error
	mustEmbedUnimplementedTableApiServer()
}

// UnimplementedTableApiServer must be embedded to have forward compatible implementations.
type UnimplementedTableApiServer struct {
}

func (UnimplementedTableApiServer) Authenticate(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedTableApiServer) StreamData(*StreamRequest, TableApi_StreamDataServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamData not implemented")
}
func (UnimplementedTableApiServer) mustEmbedUnimplementedTableApiServer() {}

// UnsafeTableApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TableApiServer will
// result in compilation errors.
type UnsafeTableApiServer interface {
	mustEmbedUnimplementedTableApiServer()
}

func RegisterTableApiServer(s grpc.ServiceRegistrar, srv TableApiServer) {
	s.RegisterService(&TableApi_ServiceDesc, srv)
}

func _TableApi_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableApiServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mdtapi.rpc.pb.TableApi/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableApiServer).Authenticate(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableApi_StreamData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TableApiServer).StreamData(m, &tableApiStreamDataServer{stream})
}

type TableApi_StreamDataServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type tableApiStreamDataServer struct {
	grpc.ServerStream
}

func (x *tableApiStreamDataServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TableApi_ServiceDesc is the grpc.ServiceDesc for TableApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TableApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mdtapi.rpc.pb.TableApi",
	HandlerType: (*TableApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _TableApi_Authenticate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamData",
			Handler:       _TableApi_StreamData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "schema/TableApi.proto",
}
