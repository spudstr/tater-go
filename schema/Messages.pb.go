// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: schema/Messages.proto

package schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Value_PriceType int32

const (
	Value_Unknown                     Value_PriceType = 0
	Value_resv                        Value_PriceType = 1
	Value_Frac_Half                   Value_PriceType = 2
	Value_Frac_Quarters               Value_PriceType = 3
	Value_Frac_Eights                 Value_PriceType = 4
	Value_Frac_Sixtenths              Value_PriceType = 5
	Value_Frac_ThirtySeconds          Value_PriceType = 6
	Value_Frac_SixtyFourths           Value_PriceType = 7
	Value_Frac_OneTwentyEights        Value_PriceType = 8
	Value_Frac_TwoFiftySixths         Value_PriceType = 9
	Value_Future_Half                 Value_PriceType = 10
	Value_Future_Quarters             Value_PriceType = 11
	Value_Future_Eights               Value_PriceType = 12
	Value_Future_Sixtenths            Value_PriceType = 13
	Value_Future_ThirtySeconds        Value_PriceType = 14
	Value_Future_HalfThirtySeconds    Value_PriceType = 15
	Value_Future_QuarterThirtySeconds Value_PriceType = 16
	Value_Future_SixtyFourths         Value_PriceType = 17
	Value_Future_HalfSixtyFourths     Value_PriceType = 18
	Value_Future_OneTwentyEights      Value_PriceType = 19
	Value_Future_TwoFiftySixths       Value_PriceType = 20
	Value_reserved2                   Value_PriceType = 21
	Value_reserved3                   Value_PriceType = 22
	Value_reserved4                   Value_PriceType = 23
	Value_Whole                       Value_PriceType = 24
	Value_Decimal1                    Value_PriceType = 25
	Value_Decimal2                    Value_PriceType = 26
	Value_Decimal3                    Value_PriceType = 27
	Value_Decimal4                    Value_PriceType = 28
	Value_Decimal5                    Value_PriceType = 29
	Value_Decimal6                    Value_PriceType = 30
	Value_Decimal7                    Value_PriceType = 31
	Value_Decimal8                    Value_PriceType = 32
	Value_Decimal9                    Value_PriceType = 33
	Value_Decimal10                   Value_PriceType = 34
	Value_Decimal11                   Value_PriceType = 35
	Value_Decimal12                   Value_PriceType = 36
	Value_Decimal13                   Value_PriceType = 37
	Value_Decimal14                   Value_PriceType = 38
	Value_Decimal15                   Value_PriceType = 39
	Value_Decimal16                   Value_PriceType = 40
	Value_Decimal17                   Value_PriceType = 41
	Value_Decimal18                   Value_PriceType = 42
	Value_Decimal19                   Value_PriceType = 43
)

// Enum value maps for Value_PriceType.
var (
	Value_PriceType_name = map[int32]string{
		0:  "Unknown",
		1:  "resv",
		2:  "Frac_Half",
		3:  "Frac_Quarters",
		4:  "Frac_Eights",
		5:  "Frac_Sixtenths",
		6:  "Frac_ThirtySeconds",
		7:  "Frac_SixtyFourths",
		8:  "Frac_OneTwentyEights",
		9:  "Frac_TwoFiftySixths",
		10: "Future_Half",
		11: "Future_Quarters",
		12: "Future_Eights",
		13: "Future_Sixtenths",
		14: "Future_ThirtySeconds",
		15: "Future_HalfThirtySeconds",
		16: "Future_QuarterThirtySeconds",
		17: "Future_SixtyFourths",
		18: "Future_HalfSixtyFourths",
		19: "Future_OneTwentyEights",
		20: "Future_TwoFiftySixths",
		21: "reserved2",
		22: "reserved3",
		23: "reserved4",
		24: "Whole",
		25: "Decimal1",
		26: "Decimal2",
		27: "Decimal3",
		28: "Decimal4",
		29: "Decimal5",
		30: "Decimal6",
		31: "Decimal7",
		32: "Decimal8",
		33: "Decimal9",
		34: "Decimal10",
		35: "Decimal11",
		36: "Decimal12",
		37: "Decimal13",
		38: "Decimal14",
		39: "Decimal15",
		40: "Decimal16",
		41: "Decimal17",
		42: "Decimal18",
		43: "Decimal19",
	}
	Value_PriceType_value = map[string]int32{
		"Unknown":                     0,
		"resv":                        1,
		"Frac_Half":                   2,
		"Frac_Quarters":               3,
		"Frac_Eights":                 4,
		"Frac_Sixtenths":              5,
		"Frac_ThirtySeconds":          6,
		"Frac_SixtyFourths":           7,
		"Frac_OneTwentyEights":        8,
		"Frac_TwoFiftySixths":         9,
		"Future_Half":                 10,
		"Future_Quarters":             11,
		"Future_Eights":               12,
		"Future_Sixtenths":            13,
		"Future_ThirtySeconds":        14,
		"Future_HalfThirtySeconds":    15,
		"Future_QuarterThirtySeconds": 16,
		"Future_SixtyFourths":         17,
		"Future_HalfSixtyFourths":     18,
		"Future_OneTwentyEights":      19,
		"Future_TwoFiftySixths":       20,
		"reserved2":                   21,
		"reserved3":                   22,
		"reserved4":                   23,
		"Whole":                       24,
		"Decimal1":                    25,
		"Decimal2":                    26,
		"Decimal3":                    27,
		"Decimal4":                    28,
		"Decimal5":                    29,
		"Decimal6":                    30,
		"Decimal7":                    31,
		"Decimal8":                    32,
		"Decimal9":                    33,
		"Decimal10":                   34,
		"Decimal11":                   35,
		"Decimal12":                   36,
		"Decimal13":                   37,
		"Decimal14":                   38,
		"Decimal15":                   39,
		"Decimal16":                   40,
		"Decimal17":                   41,
		"Decimal18":                   42,
		"Decimal19":                   43,
	}
)

func (x Value_PriceType) Enum() *Value_PriceType {
	p := new(Value_PriceType)
	*p = x
	return p
}

func (x Value_PriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Value_PriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_Messages_proto_enumTypes[0].Descriptor()
}

func (Value_PriceType) Type() protoreflect.EnumType {
	return &file_schema_Messages_proto_enumTypes[0]
}

func (x Value_PriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Value_PriceType.Descriptor instead.
func (Value_PriceType) EnumDescriptor() ([]byte, []int) {
	return file_schema_Messages_proto_rawDescGZIP(), []int{0, 0}
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     int64           `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	PriceType Value_PriceType `protobuf:"varint,2,opt,name=priceType,proto3,enum=mdtapi.rpc.pb.Value_PriceType" json:"priceType,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_Messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_schema_Messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_schema_Messages_proto_rawDescGZIP(), []int{0}
}

func (x *Value) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Value) GetPriceType() Value_PriceType {
	if x != nil {
		return x.PriceType
	}
	return Value_Unknown
}

type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Day   int32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_Messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_schema_Messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_schema_Messages_proto_rawDescGZIP(), []int{1}
}

func (x *Date) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Date) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Date) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

type MessageHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorString          string `protobuf:"bytes,1,opt,name=error_string,json=errorString,proto3" json:"error_string,omitempty"`
	Protocol             int32  `protobuf:"varint,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	UpdateTime           uint64 `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	UpdateTimeNanos      uint64 `protobuf:"varint,4,opt,name=update_time_nanos,json=updateTimeNanos,proto3" json:"update_time_nanos,omitempty"`
	SequenceNumber       uint64 `protobuf:"varint,5,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	SourceSequenceNumber uint64 `protobuf:"varint,6,opt,name=source_sequence_number,json=sourceSequenceNumber,proto3" json:"source_sequence_number,omitempty"`
	Symbol               string `protobuf:"bytes,8,opt,name=symbol,proto3" json:"symbol,omitempty"`
	LocateCode           uint32 `protobuf:"varint,9,opt,name=locate_code,json=locateCode,proto3" json:"locate_code,omitempty"`
}

func (x *MessageHeader) Reset() {
	*x = MessageHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_Messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHeader) ProtoMessage() {}

func (x *MessageHeader) ProtoReflect() protoreflect.Message {
	mi := &file_schema_Messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHeader.ProtoReflect.Descriptor instead.
func (*MessageHeader) Descriptor() ([]byte, []int) {
	return file_schema_Messages_proto_rawDescGZIP(), []int{2}
}

func (x *MessageHeader) GetErrorString() string {
	if x != nil {
		return x.ErrorString
	}
	return ""
}

func (x *MessageHeader) GetProtocol() int32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *MessageHeader) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *MessageHeader) GetUpdateTimeNanos() uint64 {
	if x != nil {
		return x.UpdateTimeNanos
	}
	return 0
}

func (x *MessageHeader) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *MessageHeader) GetSourceSequenceNumber() uint64 {
	if x != nil {
		return x.SourceSequenceNumber
	}
	return 0
}

func (x *MessageHeader) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MessageHeader) GetLocateCode() uint32 {
	if x != nil {
		return x.LocateCode
	}
	return 0
}

type Quote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *MessageHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	/// Bid Market Center code
	BidMarketCenter string `protobuf:"bytes,2,opt,name=bidMarketCenter,proto3" json:"bidMarketCenter,omitempty"`
	/// Ask Market Center code
	AskMarketCenter string `protobuf:"bytes,3,opt,name=askMarketCenter,proto3" json:"askMarketCenter,omitempty"`
	/// Market Maker ID on Level 2 quotes
	MarketMaker string `protobuf:"bytes,4,opt,name=marketMaker,proto3" json:"marketMaker,omitempty"`
	/// Bid Price
	Bid *Value `protobuf:"bytes,5,opt,name=bid,proto3" json:"bid,omitempty"`
	/// Bid Size
	BidSize uint32 `protobuf:"varint,6,opt,name=bidSize,proto3" json:"bidSize,omitempty"`
	/// Ask Price
	Ask *Value `protobuf:"bytes,7,opt,name=ask,proto3" json:"ask,omitempty"`
	/// Ask Size
	AskSize uint32 `protobuf:"varint,8,opt,name=askSize,proto3" json:"askSize,omitempty"`
	/// Quote Condition
	QuoteCondition uint32 `protobuf:"varint,9,opt,name=quoteCondition,proto3" json:"quoteCondition,omitempty"`
	/// Quote Flags
	QuoteFlags uint32 `protobuf:"varint,10,opt,name=quoteFlags,proto3" json:"quoteFlags,omitempty"`
	/// Extra Bid price information
	BidFlags uint32 `protobuf:"varint,11,opt,name=bidFlags,proto3" json:"bidFlags,omitempty"`
	/// Extra Ask price information
	AskFlags uint32 `protobuf:"varint,12,opt,name=askFlags,proto3" json:"askFlags,omitempty"`
}

func (x *Quote) Reset() {
	*x = Quote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_Messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quote) ProtoMessage() {}

func (x *Quote) ProtoReflect() protoreflect.Message {
	mi := &file_schema_Messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quote.ProtoReflect.Descriptor instead.
func (*Quote) Descriptor() ([]byte, []int) {
	return file_schema_Messages_proto_rawDescGZIP(), []int{3}
}

func (x *Quote) GetHeader() *MessageHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Quote) GetBidMarketCenter() string {
	if x != nil {
		return x.BidMarketCenter
	}
	return ""
}

func (x *Quote) GetAskMarketCenter() string {
	if x != nil {
		return x.AskMarketCenter
	}
	return ""
}

func (x *Quote) GetMarketMaker() string {
	if x != nil {
		return x.MarketMaker
	}
	return ""
}

func (x *Quote) GetBid() *Value {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *Quote) GetBidSize() uint32 {
	if x != nil {
		return x.BidSize
	}
	return 0
}

func (x *Quote) GetAsk() *Value {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *Quote) GetAskSize() uint32 {
	if x != nil {
		return x.AskSize
	}
	return 0
}

func (x *Quote) GetQuoteCondition() uint32 {
	if x != nil {
		return x.QuoteCondition
	}
	return 0
}

func (x *Quote) GetQuoteFlags() uint32 {
	if x != nil {
		return x.QuoteFlags
	}
	return 0
}

func (x *Quote) GetBidFlags() uint32 {
	if x != nil {
		return x.BidFlags
	}
	return 0
}

func (x *Quote) GetAskFlags() uint32 {
	if x != nil {
		return x.AskFlags
	}
	return 0
}

type QuoteSingleSided struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *MessageHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	/// Market Center code
	MarketCenter string `protobuf:"bytes,2,opt,name=marketCenter,proto3" json:"marketCenter,omitempty"`
	/// Market Maker ID on Level 2 quotes
	MarketMaker string `protobuf:"bytes,4,opt,name=marketMaker,proto3" json:"marketMaker,omitempty"`
	/// price
	Price *Value `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	/// size
	Size uint32 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	/// side 'B' for Bid, 'A' for Ask
	Side string `protobuf:"bytes,7,opt,name=side,proto3" json:"side,omitempty"`
	/// Quote Condition
	QuoteCondition uint32 `protobuf:"varint,8,opt,name=quoteCondition,proto3" json:"quoteCondition,omitempty"`
	/// Quote Flags
	QuoteFlags uint32 `protobuf:"varint,9,opt,name=quoteFlags,proto3" json:"quoteFlags,omitempty"`
	/// Extra price information
	PriceFlags uint32 `protobuf:"varint,10,opt,name=priceFlags,proto3" json:"priceFlags,omitempty"`
}

func (x *QuoteSingleSided) Reset() {
	*x = QuoteSingleSided{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_Messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteSingleSided) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteSingleSided) ProtoMessage() {}

func (x *QuoteSingleSided) ProtoReflect() protoreflect.Message {
	mi := &file_schema_Messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteSingleSided.ProtoReflect.Descriptor instead.
func (*QuoteSingleSided) Descriptor() ([]byte, []int) {
	return file_schema_Messages_proto_rawDescGZIP(), []int{4}
}

func (x *QuoteSingleSided) GetHeader() *MessageHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *QuoteSingleSided) GetMarketCenter() string {
	if x != nil {
		return x.MarketCenter
	}
	return ""
}

func (x *QuoteSingleSided) GetMarketMaker() string {
	if x != nil {
		return x.MarketMaker
	}
	return ""
}

func (x *QuoteSingleSided) GetPrice() *Value {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *QuoteSingleSided) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *QuoteSingleSided) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *QuoteSingleSided) GetQuoteCondition() uint32 {
	if x != nil {
		return x.QuoteCondition
	}
	return 0
}

func (x *QuoteSingleSided) GetQuoteFlags() uint32 {
	if x != nil {
		return x.QuoteFlags
	}
	return 0
}

func (x *QuoteSingleSided) GetPriceFlags() uint32 {
	if x != nil {
		return x.PriceFlags
	}
	return 0
}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *MessageHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	/// Market Center
	MarketCenter string `protobuf:"bytes,2,opt,name=marketCenter,proto3" json:"marketCenter,omitempty"`
	/// Trade Price
	Price *Value `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	/// Trade size
	Size uint64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	/// ID of trade
	TradeId uint64 `protobuf:"varint,5,opt,name=tradeId,proto3" json:"tradeId,omitempty"`
	/// Elgibility of which fields trade updates
	EligibilityFlags uint32 `protobuf:"varint,6,opt,name=eligibilityFlags,proto3" json:"eligibilityFlags,omitempty"`
	/// Extra Information on the Trade (Open, Close, Form-T, etc.)
	ReportFlags uint32 `protobuf:"varint,7,opt,name=reportFlags,proto3" json:"reportFlags,omitempty"`
	/// Indicates if it updates Consolidated and/or Market Center information
	ChangeFlags uint32 `protobuf:"varint,8,opt,name=changeFlags,proto3" json:"changeFlags,omitempty"`
	/// Extra Information on the Price (Cabinet, Notional, etc.)
	PriceFlags uint32 `protobuf:"varint,9,opt,name=priceFlags,proto3" json:"priceFlags,omitempty"`
	/// For PriorDay Trades the asofDate and asofTime will be populated
	AsOfDate *Date `protobuf:"bytes,10,opt,name=asOfDate,proto3" json:"asOfDate,omitempty"`
	/// For PriorDay Trades the asofDate and asofTime will be populated
	AsOfTime uint64 `protobuf:"varint,11,opt,name=asOfTime,proto3" json:"asOfTime,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_Messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_schema_Messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_schema_Messages_proto_rawDescGZIP(), []int{5}
}

func (x *Trade) GetHeader() *MessageHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Trade) GetMarketCenter() string {
	if x != nil {
		return x.MarketCenter
	}
	return ""
}

func (x *Trade) GetPrice() *Value {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Trade) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Trade) GetTradeId() uint64 {
	if x != nil {
		return x.TradeId
	}
	return 0
}

func (x *Trade) GetEligibilityFlags() uint32 {
	if x != nil {
		return x.EligibilityFlags
	}
	return 0
}

func (x *Trade) GetReportFlags() uint32 {
	if x != nil {
		return x.ReportFlags
	}
	return 0
}

func (x *Trade) GetChangeFlags() uint32 {
	if x != nil {
		return x.ChangeFlags
	}
	return 0
}

func (x *Trade) GetPriceFlags() uint32 {
	if x != nil {
		return x.PriceFlags
	}
	return 0
}

func (x *Trade) GetAsOfDate() *Date {
	if x != nil {
		return x.AsOfDate
	}
	return nil
}

func (x *Trade) GetAsOfTime() uint64 {
	if x != nil {
		return x.AsOfTime
	}
	return 0
}

type ValueMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *MessageHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	/// Market Center
	MarketCenter string `protobuf:"bytes,2,opt,name=marketCenter,proto3" json:"marketCenter,omitempty"`
	/// Special flags ex. Start of day, end of day etc.. See QuoddFeed documentation for description
	ValueFlags uint32 `protobuf:"varint,4,opt,name=valueFlags,proto3" json:"valueFlags,omitempty"`
	/// For PriorDay data asofDate will be populated
	AsOfDate *Date `protobuf:"bytes,5,opt,name=asOfDate,proto3" json:"asOfDate,omitempty"`
}

func (x *ValueMsg) Reset() {
	*x = ValueMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_Messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueMsg) ProtoMessage() {}

func (x *ValueMsg) ProtoReflect() protoreflect.Message {
	mi := &file_schema_Messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueMsg.ProtoReflect.Descriptor instead.
func (*ValueMsg) Descriptor() ([]byte, []int) {
	return file_schema_Messages_proto_rawDescGZIP(), []int{6}
}

func (x *ValueMsg) GetHeader() *MessageHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ValueMsg) GetMarketCenter() string {
	if x != nil {
		return x.MarketCenter
	}
	return ""
}

func (x *ValueMsg) GetValueFlags() uint32 {
	if x != nil {
		return x.ValueFlags
	}
	return 0
}

func (x *ValueMsg) GetAsOfDate() *Date {
	if x != nil {
		return x.AsOfDate
	}
	return nil
}

type TradingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *MessageHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	/// Market Center
	MarketCenter string `protobuf:"bytes,2,opt,name=marketCenter,proto3" json:"marketCenter,omitempty"`
	/// Halted, Active, etc... See (Trading Status Code) in QuoddFeed document for definition of values
	TradingStatusCode uint32 `protobuf:"varint,3,opt,name=tradingStatusCode,proto3" json:"tradingStatusCode,omitempty"`
	/// See Reason Code in QuoddFeed Document for definition of values
	ReasonCode uint32 `protobuf:"varint,4,opt,name=reasonCode,proto3" json:"reasonCode,omitempty"`
	/// More detail
	Reasondetail string `protobuf:"bytes,5,opt,name=reasondetail,proto3" json:"reasondetail,omitempty"`
	/// 0 for none 1 for MarketWide_Regulartory
	TradingActionFlags uint32 `protobuf:"varint,6,opt,name=tradingActionFlags,proto3" json:"tradingActionFlags,omitempty"`
}

func (x *TradingAction) Reset() {
	*x = TradingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_Messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingAction) ProtoMessage() {}

func (x *TradingAction) ProtoReflect() protoreflect.Message {
	mi := &file_schema_Messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingAction.ProtoReflect.Descriptor instead.
func (*TradingAction) Descriptor() ([]byte, []int) {
	return file_schema_Messages_proto_rawDescGZIP(), []int{7}
}

func (x *TradingAction) GetHeader() *MessageHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TradingAction) GetMarketCenter() string {
	if x != nil {
		return x.MarketCenter
	}
	return ""
}

func (x *TradingAction) GetTradingStatusCode() uint32 {
	if x != nil {
		return x.TradingStatusCode
	}
	return 0
}

func (x *TradingAction) GetReasonCode() uint32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *TradingAction) GetReasondetail() string {
	if x != nil {
		return x.Reasondetail
	}
	return ""
}

func (x *TradingAction) GetTradingActionFlags() uint32 {
	if x != nil {
		return x.TradingActionFlags
	}
	return 0
}

type RegSho struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *MessageHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	/// Market Center
	MarketCenter string `protobuf:"bytes,2,opt,name=marketCenter,proto3" json:"marketCenter,omitempty"`
	/// Is RegSho in effect
	RegShoIndicator bool `protobuf:"varint,3,opt,name=regShoIndicator,proto3" json:"regShoIndicator,omitempty"`
	/// 0, for none, 1 for day1 in effect, 2 for day2 in effect
	ReasonCode uint32 `protobuf:"varint,4,opt,name=reasonCode,proto3" json:"reasonCode,omitempty"`
	/// 0 for none 1 for MarketWide_Regulartory
	TradingActionFlags uint32 `protobuf:"varint,5,opt,name=tradingActionFlags,proto3" json:"tradingActionFlags,omitempty"`
}

func (x *RegSho) Reset() {
	*x = RegSho{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_Messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegSho) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegSho) ProtoMessage() {}

func (x *RegSho) ProtoReflect() protoreflect.Message {
	mi := &file_schema_Messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegSho.ProtoReflect.Descriptor instead.
func (*RegSho) Descriptor() ([]byte, []int) {
	return file_schema_Messages_proto_rawDescGZIP(), []int{8}
}

func (x *RegSho) GetHeader() *MessageHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RegSho) GetMarketCenter() string {
	if x != nil {
		return x.MarketCenter
	}
	return ""
}

func (x *RegSho) GetRegShoIndicator() bool {
	if x != nil {
		return x.RegShoIndicator
	}
	return false
}

func (x *RegSho) GetReasonCode() uint32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *RegSho) GetTradingActionFlags() uint32 {
	if x != nil {
		return x.TradingActionFlags
	}
	return 0
}

type PriceRangeIndication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *MessageHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	/// Market Center code
	MarketCenter string `protobuf:"bytes,2,opt,name=marketCenter,proto3" json:"marketCenter,omitempty"`
	/// Low Price
	LowPrice *Value `protobuf:"bytes,3,opt,name=lowPrice,proto3" json:"lowPrice,omitempty"`
	/// High Price
	HighPrice *Value `protobuf:"bytes,4,opt,name=highPrice,proto3" json:"highPrice,omitempty"`
	/// Indication Type (See Price Range Indication type in the QuoddFeed appendix documentation)
	IndicationType uint32 `protobuf:"varint,5,opt,name=indicationType,proto3" json:"indicationType,omitempty"`
}

func (x *PriceRangeIndication) Reset() {
	*x = PriceRangeIndication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_Messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceRangeIndication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceRangeIndication) ProtoMessage() {}

func (x *PriceRangeIndication) ProtoReflect() protoreflect.Message {
	mi := &file_schema_Messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceRangeIndication.ProtoReflect.Descriptor instead.
func (*PriceRangeIndication) Descriptor() ([]byte, []int) {
	return file_schema_Messages_proto_rawDescGZIP(), []int{9}
}

func (x *PriceRangeIndication) GetHeader() *MessageHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PriceRangeIndication) GetMarketCenter() string {
	if x != nil {
		return x.MarketCenter
	}
	return ""
}

func (x *PriceRangeIndication) GetLowPrice() *Value {
	if x != nil {
		return x.LowPrice
	}
	return nil
}

func (x *PriceRangeIndication) GetHighPrice() *Value {
	if x != nil {
		return x.HighPrice
	}
	return nil
}

func (x *PriceRangeIndication) GetIndicationType() uint32 {
	if x != nil {
		return x.IndicationType
	}
	return 0
}

// Blank message that will be sent to test for an alive
// connection.
type HeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusMessage string `protobuf:"bytes,1,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
}

func (x *HeartBeat) Reset() {
	*x = HeartBeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_Messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeat) ProtoMessage() {}

func (x *HeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_schema_Messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeat.ProtoReflect.Descriptor instead.
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return file_schema_Messages_proto_rawDescGZIP(), []int{10}
}

func (x *HeartBeat) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type AppendageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AppendageOneof:
	//	*AppendageData_BoolVal
	//	*AppendageData_StringVal
	//	*AppendageData_UintVal
	//	*AppendageData_IntVal
	//	*AppendageData_Value
	//	*AppendageData_Date
	//	*AppendageData_BytesVal
	AppendageOneof isAppendageData_AppendageOneof `protobuf_oneof:"appendage_oneof"`
}

func (x *AppendageData) Reset() {
	*x = AppendageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_Messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendageData) ProtoMessage() {}

func (x *AppendageData) ProtoReflect() protoreflect.Message {
	mi := &file_schema_Messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendageData.ProtoReflect.Descriptor instead.
func (*AppendageData) Descriptor() ([]byte, []int) {
	return file_schema_Messages_proto_rawDescGZIP(), []int{11}
}

func (m *AppendageData) GetAppendageOneof() isAppendageData_AppendageOneof {
	if m != nil {
		return m.AppendageOneof
	}
	return nil
}

func (x *AppendageData) GetBoolVal() bool {
	if x, ok := x.GetAppendageOneof().(*AppendageData_BoolVal); ok {
		return x.BoolVal
	}
	return false
}

func (x *AppendageData) GetStringVal() string {
	if x, ok := x.GetAppendageOneof().(*AppendageData_StringVal); ok {
		return x.StringVal
	}
	return ""
}

func (x *AppendageData) GetUintVal() uint32 {
	if x, ok := x.GetAppendageOneof().(*AppendageData_UintVal); ok {
		return x.UintVal
	}
	return 0
}

func (x *AppendageData) GetIntVal() int64 {
	if x, ok := x.GetAppendageOneof().(*AppendageData_IntVal); ok {
		return x.IntVal
	}
	return 0
}

func (x *AppendageData) GetValue() *Value {
	if x, ok := x.GetAppendageOneof().(*AppendageData_Value); ok {
		return x.Value
	}
	return nil
}

func (x *AppendageData) GetDate() *Date {
	if x, ok := x.GetAppendageOneof().(*AppendageData_Date); ok {
		return x.Date
	}
	return nil
}

func (x *AppendageData) GetBytesVal() []byte {
	if x, ok := x.GetAppendageOneof().(*AppendageData_BytesVal); ok {
		return x.BytesVal
	}
	return nil
}

type isAppendageData_AppendageOneof interface {
	isAppendageData_AppendageOneof()
}

type AppendageData_BoolVal struct {
	BoolVal bool `protobuf:"varint,1,opt,name=boolVal,proto3,oneof"`
}

type AppendageData_StringVal struct {
	StringVal string `protobuf:"bytes,2,opt,name=stringVal,proto3,oneof"`
}

type AppendageData_UintVal struct {
	UintVal uint32 `protobuf:"varint,3,opt,name=uintVal,proto3,oneof"`
}

type AppendageData_IntVal struct {
	IntVal int64 `protobuf:"varint,4,opt,name=intVal,proto3,oneof"`
}

type AppendageData_Value struct {
	Value *Value `protobuf:"bytes,5,opt,name=value,proto3,oneof"`
}

type AppendageData_Date struct {
	Date *Date `protobuf:"bytes,6,opt,name=date,proto3,oneof"`
}

type AppendageData_BytesVal struct {
	BytesVal []byte `protobuf:"bytes,7,opt,name=bytesVal,proto3,oneof"`
}

func (*AppendageData_BoolVal) isAppendageData_AppendageOneof() {}

func (*AppendageData_StringVal) isAppendageData_AppendageOneof() {}

func (*AppendageData_UintVal) isAppendageData_AppendageOneof() {}

func (*AppendageData_IntVal) isAppendageData_AppendageOneof() {}

func (*AppendageData_Value) isAppendageData_AppendageOneof() {}

func (*AppendageData_Date) isAppendageData_AppendageOneof() {}

func (*AppendageData_BytesVal) isAppendageData_AppendageOneof() {}

type MarketDataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MessageOneof:
	//	*MarketDataMessage_Quote
	//	*MarketDataMessage_Trade
	//	*MarketDataMessage_Value
	//	*MarketDataMessage_QuoteSingleSided
	//	*MarketDataMessage_TradingAction
	//	*MarketDataMessage_RegSho
	//	*MarketDataMessage_PriceRangeIndication
	//	*MarketDataMessage_HeartBeat
	MessageOneof isMarketDataMessage_MessageOneof `protobuf_oneof:"message_oneof"`
	/// self describing appendages to the message
	/// the key is the ValueType (FieldId)
	Appendages map[uint32]*AppendageData `protobuf:"bytes,9,rep,name=appendages,proto3" json:"appendages,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MarketDataMessage) Reset() {
	*x = MarketDataMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_Messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataMessage) ProtoMessage() {}

func (x *MarketDataMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_Messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataMessage.ProtoReflect.Descriptor instead.
func (*MarketDataMessage) Descriptor() ([]byte, []int) {
	return file_schema_Messages_proto_rawDescGZIP(), []int{12}
}

func (m *MarketDataMessage) GetMessageOneof() isMarketDataMessage_MessageOneof {
	if m != nil {
		return m.MessageOneof
	}
	return nil
}

func (x *MarketDataMessage) GetQuote() *Quote {
	if x, ok := x.GetMessageOneof().(*MarketDataMessage_Quote); ok {
		return x.Quote
	}
	return nil
}

func (x *MarketDataMessage) GetTrade() *Trade {
	if x, ok := x.GetMessageOneof().(*MarketDataMessage_Trade); ok {
		return x.Trade
	}
	return nil
}

func (x *MarketDataMessage) GetValue() *ValueMsg {
	if x, ok := x.GetMessageOneof().(*MarketDataMessage_Value); ok {
		return x.Value
	}
	return nil
}

func (x *MarketDataMessage) GetQuoteSingleSided() *QuoteSingleSided {
	if x, ok := x.GetMessageOneof().(*MarketDataMessage_QuoteSingleSided); ok {
		return x.QuoteSingleSided
	}
	return nil
}

func (x *MarketDataMessage) GetTradingAction() *TradingAction {
	if x, ok := x.GetMessageOneof().(*MarketDataMessage_TradingAction); ok {
		return x.TradingAction
	}
	return nil
}

func (x *MarketDataMessage) GetRegSho() *RegSho {
	if x, ok := x.GetMessageOneof().(*MarketDataMessage_RegSho); ok {
		return x.RegSho
	}
	return nil
}

func (x *MarketDataMessage) GetPriceRangeIndication() *PriceRangeIndication {
	if x, ok := x.GetMessageOneof().(*MarketDataMessage_PriceRangeIndication); ok {
		return x.PriceRangeIndication
	}
	return nil
}

func (x *MarketDataMessage) GetHeartBeat() *HeartBeat {
	if x, ok := x.GetMessageOneof().(*MarketDataMessage_HeartBeat); ok {
		return x.HeartBeat
	}
	return nil
}

func (x *MarketDataMessage) GetAppendages() map[uint32]*AppendageData {
	if x != nil {
		return x.Appendages
	}
	return nil
}

type isMarketDataMessage_MessageOneof interface {
	isMarketDataMessage_MessageOneof()
}

type MarketDataMessage_Quote struct {
	Quote *Quote `protobuf:"bytes,1,opt,name=quote,proto3,oneof"`
}

type MarketDataMessage_Trade struct {
	Trade *Trade `protobuf:"bytes,2,opt,name=trade,proto3,oneof"`
}

type MarketDataMessage_Value struct {
	Value *ValueMsg `protobuf:"bytes,3,opt,name=value,proto3,oneof"`
}

type MarketDataMessage_QuoteSingleSided struct {
	QuoteSingleSided *QuoteSingleSided `protobuf:"bytes,4,opt,name=quoteSingleSided,proto3,oneof"`
}

type MarketDataMessage_TradingAction struct {
	TradingAction *TradingAction `protobuf:"bytes,5,opt,name=tradingAction,proto3,oneof"`
}

type MarketDataMessage_RegSho struct {
	RegSho *RegSho `protobuf:"bytes,6,opt,name=regSho,proto3,oneof"`
}

type MarketDataMessage_PriceRangeIndication struct {
	PriceRangeIndication *PriceRangeIndication `protobuf:"bytes,7,opt,name=priceRangeIndication,proto3,oneof"`
}

type MarketDataMessage_HeartBeat struct {
	HeartBeat *HeartBeat `protobuf:"bytes,8,opt,name=heartBeat,proto3,oneof"`
}

func (*MarketDataMessage_Quote) isMarketDataMessage_MessageOneof() {}

func (*MarketDataMessage_Trade) isMarketDataMessage_MessageOneof() {}

func (*MarketDataMessage_Value) isMarketDataMessage_MessageOneof() {}

func (*MarketDataMessage_QuoteSingleSided) isMarketDataMessage_MessageOneof() {}

func (*MarketDataMessage_TradingAction) isMarketDataMessage_MessageOneof() {}

func (*MarketDataMessage_RegSho) isMarketDataMessage_MessageOneof() {}

func (*MarketDataMessage_PriceRangeIndication) isMarketDataMessage_MessageOneof() {}

func (*MarketDataMessage_HeartBeat) isMarketDataMessage_MessageOneof() {}

var File_schema_Messages_proto protoreflect.FileDescriptor

var file_schema_Messages_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x64, 0x74, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x22, 0x8a, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x64, 0x74, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xac, 0x06, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x76, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x72, 0x61,
	0x63, 0x5f, 0x48, 0x61, 0x6c, 0x66, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x72, 0x61, 0x63,
	0x5f, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x46,
	0x72, 0x61, 0x63, 0x5f, 0x45, 0x69, 0x67, 0x68, 0x74, 0x73, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x46, 0x72, 0x61, 0x63, 0x5f, 0x53, 0x69, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x68, 0x73, 0x10, 0x05,
	0x12, 0x16, 0x0a, 0x12, 0x46, 0x72, 0x61, 0x63, 0x5f, 0x54, 0x68, 0x69, 0x72, 0x74, 0x79, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x72, 0x61, 0x63,
	0x5f, 0x53, 0x69, 0x78, 0x74, 0x79, 0x46, 0x6f, 0x75, 0x72, 0x74, 0x68, 0x73, 0x10, 0x07, 0x12,
	0x18, 0x0a, 0x14, 0x46, 0x72, 0x61, 0x63, 0x5f, 0x4f, 0x6e, 0x65, 0x54, 0x77, 0x65, 0x6e, 0x74,
	0x79, 0x45, 0x69, 0x67, 0x68, 0x74, 0x73, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x72, 0x61,
	0x63, 0x5f, 0x54, 0x77, 0x6f, 0x46, 0x69, 0x66, 0x74, 0x79, 0x53, 0x69, 0x78, 0x74, 0x68, 0x73,
	0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x48, 0x61, 0x6c,
	0x66, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x51, 0x75,
	0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x45, 0x69, 0x67, 0x68, 0x74, 0x73, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x53, 0x69, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x68, 0x73, 0x10,
	0x0d, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x54, 0x68, 0x69, 0x72,
	0x74, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x48, 0x61, 0x6c, 0x66, 0x54, 0x68, 0x69, 0x72, 0x74, 0x79,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x54, 0x68, 0x69, 0x72, 0x74,
	0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x53, 0x69, 0x78, 0x74, 0x79, 0x46, 0x6f, 0x75, 0x72, 0x74, 0x68,
	0x73, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x48, 0x61,
	0x6c, 0x66, 0x53, 0x69, 0x78, 0x74, 0x79, 0x46, 0x6f, 0x75, 0x72, 0x74, 0x68, 0x73, 0x10, 0x12,
	0x12, 0x1a, 0x0a, 0x16, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x4f, 0x6e, 0x65, 0x54, 0x77,
	0x65, 0x6e, 0x74, 0x79, 0x45, 0x69, 0x67, 0x68, 0x74, 0x73, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x54, 0x77, 0x6f, 0x46, 0x69, 0x66, 0x74, 0x79, 0x53,
	0x69, 0x78, 0x74, 0x68, 0x73, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x32, 0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x33, 0x10, 0x16, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x34, 0x10, 0x17, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x10, 0x18, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x31, 0x10, 0x19, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x32, 0x10, 0x1a, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x33, 0x10, 0x1b, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x34, 0x10, 0x1c, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x35, 0x10, 0x1d, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x10, 0x1e, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x37, 0x10,
	0x1f, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x38, 0x10, 0x20, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x39, 0x10, 0x21, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x31, 0x30, 0x10, 0x22, 0x12, 0x0d, 0x0a, 0x09,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x31, 0x31, 0x10, 0x23, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x31, 0x32, 0x10, 0x24, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x31, 0x33, 0x10, 0x25, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x31, 0x34, 0x10, 0x26, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x31, 0x35, 0x10, 0x27, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x31, 0x36, 0x10, 0x28, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x31, 0x37, 0x10, 0x29, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x31, 0x38, 0x10, 0x2a, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x31,
	0x39, 0x10, 0x2b, 0x22, 0x42, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0xb3, 0x02, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb7, 0x03,
	0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x64, 0x74, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x62, 0x69, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x69, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x73, 0x6b, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x61,
	0x6b, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x64, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x69,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x64, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x62, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x73, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61,
	0x73, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xca, 0x02, 0x0a, 0x10, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x64, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x64, 0x74, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x22, 0x98, 0x03, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x64, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x64, 0x74, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x61, 0x73, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x64, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x08, 0x61, 0x73, 0x4f, 0x66, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x73, 0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xb5, 0x01, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x64, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x61, 0x73, 0x4f, 0x66, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x64, 0x74, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x08, 0x61,
	0x73, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x64, 0x74, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x53, 0x68, 0x6f,
	0x12, 0x34, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x64, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x67, 0x53, 0x68, 0x6f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x53, 0x68, 0x6f, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x64, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x64, 0x74, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x68, 0x69, 0x67,
	0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x64, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x0d, 0x41, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x07, 0x62,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x75, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x64, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x64, 0x74, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x67,
	0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0xbb, 0x05, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a,
	0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x64, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x64, 0x74,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x64, 0x74, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x73,
	0x67, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x64, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x53, 0x69, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x64, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x53, 0x68, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x64, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x67, 0x53, 0x68, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x53, 0x68, 0x6f,
	0x12, 0x59, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6d, 0x64, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6d, 0x64, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x50, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x64, 0x74, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x5b, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x64,
	0x74, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x29, 0x48, 0x01, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x75, 0x64, 0x73, 0x74, 0x72, 0x2f, 0x74, 0x61,
	0x74, 0x65, 0x72, 0x2d, 0x67, 0x6f, 0x3b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0xf8, 0x01, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_schema_Messages_proto_rawDescOnce sync.Once
	file_schema_Messages_proto_rawDescData = file_schema_Messages_proto_rawDesc
)

func file_schema_Messages_proto_rawDescGZIP() []byte {
	file_schema_Messages_proto_rawDescOnce.Do(func() {
		file_schema_Messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_schema_Messages_proto_rawDescData)
	})
	return file_schema_Messages_proto_rawDescData
}

var file_schema_Messages_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_schema_Messages_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_schema_Messages_proto_goTypes = []interface{}{
	(Value_PriceType)(0),         // 0: mdtapi.rpc.pb.Value.PriceType
	(*Value)(nil),                // 1: mdtapi.rpc.pb.Value
	(*Date)(nil),                 // 2: mdtapi.rpc.pb.Date
	(*MessageHeader)(nil),        // 3: mdtapi.rpc.pb.MessageHeader
	(*Quote)(nil),                // 4: mdtapi.rpc.pb.Quote
	(*QuoteSingleSided)(nil),     // 5: mdtapi.rpc.pb.QuoteSingleSided
	(*Trade)(nil),                // 6: mdtapi.rpc.pb.Trade
	(*ValueMsg)(nil),             // 7: mdtapi.rpc.pb.ValueMsg
	(*TradingAction)(nil),        // 8: mdtapi.rpc.pb.TradingAction
	(*RegSho)(nil),               // 9: mdtapi.rpc.pb.RegSho
	(*PriceRangeIndication)(nil), // 10: mdtapi.rpc.pb.PriceRangeIndication
	(*HeartBeat)(nil),            // 11: mdtapi.rpc.pb.HeartBeat
	(*AppendageData)(nil),        // 12: mdtapi.rpc.pb.AppendageData
	(*MarketDataMessage)(nil),    // 13: mdtapi.rpc.pb.MarketDataMessage
	nil,                          // 14: mdtapi.rpc.pb.MarketDataMessage.AppendagesEntry
}
var file_schema_Messages_proto_depIdxs = []int32{
	0,  // 0: mdtapi.rpc.pb.Value.priceType:type_name -> mdtapi.rpc.pb.Value.PriceType
	3,  // 1: mdtapi.rpc.pb.Quote.header:type_name -> mdtapi.rpc.pb.MessageHeader
	1,  // 2: mdtapi.rpc.pb.Quote.bid:type_name -> mdtapi.rpc.pb.Value
	1,  // 3: mdtapi.rpc.pb.Quote.ask:type_name -> mdtapi.rpc.pb.Value
	3,  // 4: mdtapi.rpc.pb.QuoteSingleSided.header:type_name -> mdtapi.rpc.pb.MessageHeader
	1,  // 5: mdtapi.rpc.pb.QuoteSingleSided.price:type_name -> mdtapi.rpc.pb.Value
	3,  // 6: mdtapi.rpc.pb.Trade.header:type_name -> mdtapi.rpc.pb.MessageHeader
	1,  // 7: mdtapi.rpc.pb.Trade.price:type_name -> mdtapi.rpc.pb.Value
	2,  // 8: mdtapi.rpc.pb.Trade.asOfDate:type_name -> mdtapi.rpc.pb.Date
	3,  // 9: mdtapi.rpc.pb.ValueMsg.header:type_name -> mdtapi.rpc.pb.MessageHeader
	2,  // 10: mdtapi.rpc.pb.ValueMsg.asOfDate:type_name -> mdtapi.rpc.pb.Date
	3,  // 11: mdtapi.rpc.pb.TradingAction.header:type_name -> mdtapi.rpc.pb.MessageHeader
	3,  // 12: mdtapi.rpc.pb.RegSho.header:type_name -> mdtapi.rpc.pb.MessageHeader
	3,  // 13: mdtapi.rpc.pb.PriceRangeIndication.header:type_name -> mdtapi.rpc.pb.MessageHeader
	1,  // 14: mdtapi.rpc.pb.PriceRangeIndication.lowPrice:type_name -> mdtapi.rpc.pb.Value
	1,  // 15: mdtapi.rpc.pb.PriceRangeIndication.highPrice:type_name -> mdtapi.rpc.pb.Value
	1,  // 16: mdtapi.rpc.pb.AppendageData.value:type_name -> mdtapi.rpc.pb.Value
	2,  // 17: mdtapi.rpc.pb.AppendageData.date:type_name -> mdtapi.rpc.pb.Date
	4,  // 18: mdtapi.rpc.pb.MarketDataMessage.quote:type_name -> mdtapi.rpc.pb.Quote
	6,  // 19: mdtapi.rpc.pb.MarketDataMessage.trade:type_name -> mdtapi.rpc.pb.Trade
	7,  // 20: mdtapi.rpc.pb.MarketDataMessage.value:type_name -> mdtapi.rpc.pb.ValueMsg
	5,  // 21: mdtapi.rpc.pb.MarketDataMessage.quoteSingleSided:type_name -> mdtapi.rpc.pb.QuoteSingleSided
	8,  // 22: mdtapi.rpc.pb.MarketDataMessage.tradingAction:type_name -> mdtapi.rpc.pb.TradingAction
	9,  // 23: mdtapi.rpc.pb.MarketDataMessage.regSho:type_name -> mdtapi.rpc.pb.RegSho
	10, // 24: mdtapi.rpc.pb.MarketDataMessage.priceRangeIndication:type_name -> mdtapi.rpc.pb.PriceRangeIndication
	11, // 25: mdtapi.rpc.pb.MarketDataMessage.heartBeat:type_name -> mdtapi.rpc.pb.HeartBeat
	14, // 26: mdtapi.rpc.pb.MarketDataMessage.appendages:type_name -> mdtapi.rpc.pb.MarketDataMessage.AppendagesEntry
	12, // 27: mdtapi.rpc.pb.MarketDataMessage.AppendagesEntry.value:type_name -> mdtapi.rpc.pb.AppendageData
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_schema_Messages_proto_init() }
func file_schema_Messages_proto_init() {
	if File_schema_Messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_schema_Messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_Messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_Messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_Messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_Messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteSingleSided); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_Messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_Messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_Messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_Messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegSho); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_Messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceRangeIndication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_Messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_Messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_Messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_schema_Messages_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*AppendageData_BoolVal)(nil),
		(*AppendageData_StringVal)(nil),
		(*AppendageData_UintVal)(nil),
		(*AppendageData_IntVal)(nil),
		(*AppendageData_Value)(nil),
		(*AppendageData_Date)(nil),
		(*AppendageData_BytesVal)(nil),
	}
	file_schema_Messages_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*MarketDataMessage_Quote)(nil),
		(*MarketDataMessage_Trade)(nil),
		(*MarketDataMessage_Value)(nil),
		(*MarketDataMessage_QuoteSingleSided)(nil),
		(*MarketDataMessage_TradingAction)(nil),
		(*MarketDataMessage_RegSho)(nil),
		(*MarketDataMessage_PriceRangeIndication)(nil),
		(*MarketDataMessage_HeartBeat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schema_Messages_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schema_Messages_proto_goTypes,
		DependencyIndexes: file_schema_Messages_proto_depIdxs,
		EnumInfos:         file_schema_Messages_proto_enumTypes,
		MessageInfos:      file_schema_Messages_proto_msgTypes,
	}.Build()
	File_schema_Messages_proto = out.File
	file_schema_Messages_proto_rawDesc = nil
	file_schema_Messages_proto_goTypes = nil
	file_schema_Messages_proto_depIdxs = nil
}
